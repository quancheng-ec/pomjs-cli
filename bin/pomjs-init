#!/usr/bin/env node

const download = require("download-git-repo");
const program = require("commander");
const ora = require("ora");
const os = require("os");
const uid = require("uid");
const rm = require('rimraf').sync;
const exists = require("fs").existsSync;
const path = require("path");
const inquirer = require("inquirer");

const logger = require("../lib/logger")("pomjs-cli");
const checkVersion = require("../lib/check-version");

program
	.usage("[project-name]")
	.option("-c, --clone", "use git clone");

process.on("exit", () => {
	console.log()
});

program.on('--help', function() {
	console.log("  Examples:");
	console.log("");
	console.log("    $ pomjs init my-pomjs-project");
	console.log("");
});

program.parse(process.argv);

const distName = program.args[0];
const inDistFolder = !distName || distName === ".";
const distPath = path.resolve(distName || ".");

if (exists(distPath)) {
	inquirer.prompt([{
		type: "confirm",
		message: inDistFolder ? "Generate project in current directory?" : "Target directory exists. Continue?",
		name: "ok"
	}]).then(answer => {
		if (answer.ok) run();
	})
} else {
	run();
}

function run() {
	return askTemplate().then(answer => {
		return checkVersion()
			.then(() => {
				downloadAndGenerate(answer.choice)
			})
			.catch(reason => logger.fatal(reason));
	})
}

function askTemplate() {
	return inquirer.prompt([{
		type: "list",
		message: "Choose a template to download",
		name: "choice",
		choices: ["pomjs-example"],
		default: "pomjs-example"
	}])
}

function downloadAndGenerate(templateName) {
	const spinner = ora("downloading project template").start();

	download("quancheng-ec/" + templateName, distPath, {
		clone: program.clone
	}, (err) => {
		spinner.stop();
		if (err) logger.fatal("Failed to download repo: " + err.message.trim());
		logger.success("Your Project has been created.")
	})
}
